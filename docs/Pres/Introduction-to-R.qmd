---
format: 
  revealjs:
    theme: [style.scss, default]
    width: "100%"
    height: "100%"
    minScale: 1
    maxScale: 1
    center: false
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)
```

```{r, echo = F}
library(ggplot2)
library(dplyr)
library(cowplot)
library(extrafont)
library(tidyverse)

theme_set(
  theme_bw() + 
    theme(plot.background = element_rect(fill = "#eaebff", color = "#eaebff"),
          legend.box.background = element_rect(color = "black"))
)
```

##

<div style="position:absolute;width:80%;height:500px;border: 0px double;padding: 150px 10px; left:10%; top:20px;">
<div style="position:absolute;width:500px">
<img src="fig/2bees_opaque.png" width="400" height="400" style="border:2px solid; border-radius:100%; padding:0px;display:block;margin-left:auto;margin-right:auto"> 
<div style="font-size:0.25em;position:absolute;right:0px;">Illustration: Amrei Binzer-Panchal</div>
</div>
<div style="position:absolute;text-align:left; font-size: 1.5em;padding:50px;left:500px;width:50%;">
<br>
<div style="font-size:0.5em">Basic Biostatistics and Bioinformatics</div>

Session 1: Introduction to R

<div style="font-size:0.5em">Swedish University of Agricultural Sciences, Alnarp</div>
<div style="font-size:0.3em"><br>13 November 2023</div>
</div>

</div>

## Basic Biostatistics and Bioinformatics

A seminar series on fundamentals 

Organised by *SLUBI* and *Statistics at SLU*

Presentation of background and a practical exercise

<br>
Upcoming topics

- 27 November. Linux Basics
- 11 December. PCA
- 15 January. Introduction to Markdown
- 29 January Population Structure

<br>
Topic suggestions are welcome

##

**SLUBI**

- SLU bioinformatics center
- Weekly online drop-in (Wednesdays at 13.00)
- slubi@slu.se, [https://www.slubi.se](https://www.slubi.se)
- Alnarp: Lizel Potgieter (Dept. of Plant Breeding)

<br>

**Statistics at SLU**

- SLU statistics center
- Free consultations for all SLU staff
- statistics@slu.se
- Alnarp: Jan-Eric Englund and Adam Fl√∂hr (Dept. of Biosystems and Technology)

## Today's Presentation

R & RStudio

Data handling

- Filter
- Select
- Transform

Plotting

Some RStudio features

Troubleshooting

<br>

Exercise session

## Introduction

<div style="float:right;width:60%;">
```{r, echo = F, fig.height=7, fig.width = 10}
dat <- data.frame(Year = c(1976, 1991, 1995, 2000, 2004, 2013, 2020),
                  Note = c("S created by John Chambers, Bell Labs",
                           "R created by R. Gentleman and R. Ithaka, University of Aukland, NZ",
                           "Goes under free license. First public release",
                           "First stable beta release, R 1.0.0",
                           "Release of R 2.0.0",
                           "Release of R 3.0.0",
                           "Release of R 4.0.0"))

ggplot(dat) + 
  annotate("segment", x = 0, xend = 0, y = -1976, yend = -2020, linetype = "dashed") +
  geom_point(aes(x = 0, y = -Year), size = 14, fill = "#eaebff", shape = 21) +
  geom_text(aes(x = 0, y = -Year, label = Year), col = "black", family = "Garamond", size = 5) +
  geom_text(aes(x = 1, y = -Year, label = Note), hjust = 0, family = "Garamond", size = 8) +
  theme_nothing() +
  xlim(0,20) +
  theme(panel.background = element_rect(fill = "#eaebff", color = NA),
        plot.background = element_rect(fill = "#eaebff", color = NA))
```
</div>

Open software used for statistical analysis

Code-based interface

## R & RStudio

*R* itself is the programming language

The installation of the language comes with a basic interface

Most users work in more advanced interfaces, the most common of which is *RStudio*

## Installation of R & RStudio

R. https://www.r-project.org/

*CRAN* in left frame > Select any mirror > Select depending on operating system

RStudio. https://posit.co/

*Products* > Select open version > Select RStudio Desktop > Select free version

## Base R & Packages

R is extended by creating new functions

Collections of functions are called *packages*

The basic installation comes with a set of packages

New packages can be installed from CRAN (the *Comprehensive R Archive Network*)

```{r, eval = F}
install.packages("tidyverse")
library(tidyverse)
```

## Working in R. Objects

In R, information is stored as named *objects*

Objects are stored by writing a name followed by the *assign arrow* `<-`

Objects can be very simple, like a single number

```{r}
x <- 3
x # Simple writing the name of an object will print it
```

A bit more complex, like a *vector* (an ordered sequence of numbers)

```{r}
x <- c(3, 14, 159)
x
```

##

And more complex still, like a collection of vectors in a *data frame*

```{r}
dat <- data.frame(x = c(1,2,3), y = c("a", "b", "c"))
dat
```

## Functions

Objects are created and changed using *functions*

Function take some input and produce an output

Functions typically have a set of arguments, allowing the user to control its behaviour

Called using the function name followed by the input and arguments in brackets


```{r}
x <- c(3, 14, 159)
sum(x) # Calculates the sum of the vector
```

The output of a function can be printed directly or stored as a new object

```{r}
s <- sum(x)
s
```

##

`NA` is used for missing values

```{r}
x <- c(3, 14, 159, NA)
sum(x)
sum(x, na.rm = TRUE) # Setting the argument na.rm to TRUE removes the NAs
```

## Code structure and piping

Many different ways to structure code with several steps

Simple example: (i) given a vector, (ii) transform with the logarithm, (iii) take the sum.

<div style="position:relative;">
<div style="position:absolute;width:30%;left:0%;top:0;">
1\. Store each step and use in next line

```{r}
dat <- c(3, 14, 159)
dat <- log(dat)
sum(dat)
```
</div>
<div class="fragment fade-in" style="position:absolute;width:30%; left:33%;top:0;">
2\. Use functions within functions

```{r}
sum(log(c(3, 14, 159)))
```
</div>
<div class="fragment fade-in" style="position:absolute;width:30%; left:67%;top:0;">
3\. Use piping (`%>%` or `|>`) to send output into the next function

```{r}
c(3, 14, 159) %>%
  log() %>%
  sum()
```

The pipe takes the output of the left function and sends it as input to the right function

RStudio shortcut: ctrl + shift + M
</div>
</div>

## Data import

Base R and add-on packages include multiple functions to import data

The specific choice of function depends on the data type

The file path can be specified relative a *working directory* - the base folder of the current R session

```{r, eval = F}
dat_tv <- read.table("Data/IMDb_Economist_tv_ratings.csv", header = T, sep = ",", dec = ".")
```

```{r}
library(readxl)
dat_tv <- read_excel("Data/IMDb_Economist_tv_ratings.xlsx")
dat_tv
```

## Transforming and adding columns

Columns can be transformed or added by using functions on existing columns

1. Using `$` and the assign arrow `<-`

```{r}
dat_tv$year <- year(dat_tv$date)
```

2. Using piping and `mutate`

```{r}
dat_tv <- dat_tv %>% 
  mutate(year = year(date))
```

Note that we still have to assign in order to store the new data frame

## Selecting

Selecting takes a subset of *columns*

The show names are in the third column, called `title`

1. Using `$` and the name

```{r, eval = F}
dat_tv$title
```

2. Using `[]` and an index

```{r, eval = F}
dat_tv[ , 3] # First index left empty because we want all rows
```

3. Using piping and `select`

```{r, eval = F}
dat_tv %>% 
  select(title)
```

## Filtering

Filtering takes a subset of *rows*

We pick out seasons with an average rating (`av_rating`) above 9

1. Using `[]` and a logical statement

```{r, eval = F}
dat_tv[dat_tv$av_rating > 9,]
```

2. Using piping and `filter`

```{r, eval = F}
dat_tv %>% 
  filter(av_rating > 9)
```

## Sorting

Sorting gives a re-ordering of the data

We order by average rating

1. Using `[]` and `order`

```{r, eval = F}
dat_tv[order(dat_tv$av_rating, decreasing = T), ]
```

Note the use the argument `decreasing` to get the highest ratings first

2. Using piping and `arrange`

```{r, eval = F}
dat_tv %>% 
  arrange(-av_rating)
```

Note the use of `-` to get the highest rating first

## Results

```{r}
dat_tv %>%  # Take the TV data, then ...
  filter(title == "Midsomer Murders") %>% # filter for title being Midsomer Murders, then ...
  arrange(-av_rating) %>% # sort by average rating in decreasing order, then ...
  select(title, seasonNumber, av_rating, genres) # select a subset of columns
```

## Aggregating

Aggregating calculates a summary value over a subset of values

We calculate mean rating across seasons

1. Using the `aggregate` function

```{r, eval = F}
aggregate(av_rating ~ title, dat_tv, FUN = mean)
```

2. Using piping, `group_by` and `summarise`

```{r, eval = T}
dat_tv %>% 
  group_by(title) %>% 
  summarise(mean_rating = mean(av_rating))
```

## Plots

<div style="width:50%;float:right;">
Average rating by year

```{r, fig.height=6}
plot(dat_tv$year, dat_tv$av_rating, main = "Base R")
```
</div>

Base R includes functions to make plots

Highly customizable

Can add elements using functions like `points()`, `lines()` and `text()`

## Plots. `ggplot2`

<div style="width:50%;float:right;">
```{r, fig.height=6}
library(ggplot2)
ggplot(dat_tv, aes(year, av_rating)) +
  geom_point(col = "grey75") +
  geom_line(data = dat_tv %>% filter(title == "Midsomer Murders"), 
            col = "red", size = 1) +
  ggtitle("ggplot2")
```
</div>

Many packages extend the plotting functionality, most notably `ggplot2`

Variables are specified in a special `aes()` function (aestethics)

Plot elements are added as `geom`s (geometries)

## RStudio

The RStudio window is divided into several frames

Code is run in the *Console* frame

<h3>Scripts</h3>

One usually writes code in a script (a separate text file)

*File > New file > R Script*

Lines from the script are run in the console by clicking the *Run* button or ctrl + enter

Scripts are saved with the file extention .R, but are just basic text files which can be opened in any text editor

Divide into sections and comment specific rows using `#`

## RStudio. Projects

*File > New project...*

Creates a new folder for storing scripts, data, and output

Keeps the material contained, making it easier to keep track of changes and to share

Opening the project automatically sets the working directory to the project folder

Perfect to keep track of scripts written during a course

## Something about style

R does not read empty space

Divide into several steps and add spaces and line breaks to make readable code

```{r, eval = F}
x <- c(3, 14, 159)
y <- c(5, 2, 12)

plot(x, y, col = "red", pch = 3)
```

is more readable than

```{r, eval = F}
plot(c(3,14,159),c(5,2,12),col="red",pch=3)
```

## RMarkdown / Quarto

RMarkdown and Quarto allows one to mix written text and R code

The file can then be rendered into some standard format

*File > New file > R Markdown...* or *Quarto Document...*, then select file type

Possible output file types include html, pdf, and word

## Troubleshooting

Every function has a help page

Either search in the *Help* frame in RStudio or run `?function_name`

```{r, eval = F}
?plot
```

Always read error messages carefully

Use Google and Stack Overflow

## Resources

R website: http://r-project.org

<br>

RStudio website: https://posit.co/

RStudio cheat sheets: https://posit.co/resources/cheatsheets/

<br>

Grolemund & Wickham, R for Data Science, https://r4ds.had.co.nz/

Wickham, Navarro & Pedersen, https://ggplot2-book.org/

##

<div style="position:absolute;width:80%;height:500px;border: 0px double;padding: 150px 10px; left:10%; top:20px;">
<div style="position:absolute;width:500px">
<img src="fig/2bees_opaque.png" width="400" height="400" style="border:2px solid; border-radius:100%; padding:0px;display:block;margin-left:auto;margin-right:auto"> 
<div style="font-size:0.25em;position:absolute;right:0px;">Illustration: Amrei Binzer-Panchal</div>
</div>
<div style="position:absolute;text-align:left; font-size: 1.5em;padding:50px;left:500px;width:50%;">
<br>

The End.
Stick around for practical exercise
</div>

</div>